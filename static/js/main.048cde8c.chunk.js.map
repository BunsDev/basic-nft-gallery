{"version":3,"sources":["theme/theme.ts","config/constants.ts","hooks/useAppState.tsx","services/covalent.ts","hooks/useWeb3.tsx","utils/formatAddress.ts","components/ConnectWalletButton/ConnectWalletButton.tsx","components/PageLayout/NavBar.tsx","components/PageLayout/PageLayout.tsx","components/EtherscanLink/EtherscanLink.tsx","hooks/useFetchData.tsx","components/NFTCard/NFTTransferButton.tsx","components/NFTCard/NFTCard.tsx","services/fetchTokenURI.ts","services/contract.ts","pages/NFTGalleryPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","createTheme","AppStateContext","React","createContext","useAppState","useContext","AppStateProvider","children","error","useWeb3React","useState","undefined","exampleAccount","setExampleAccount","tokens","setTokens","loading","setLoading","appError","setAppError","toggleExampleAccount","useCallback","getTokens","appAccount","address","fetch","then","res","a","json","console","Error","error_message","error_code","data","items","filter","nft_data","supports_erc","includes","flatMap","contract_address","map","token_id","owner","contractAddress","tokenId","nfts","catch","useEffect","Provider","value","setError","injected","InjectedConnector","supportedChainIds","useWeb3","activate","rest","activateWithConnector","args","getLibrary","provider","ethers","providers","Web3Provider","isAddress","getAddress","formatAddress","chars","parsed","substring","ConnectWalletButton","account","deactivate","open","setOpen","handleClose","Button","variant","color","onClick","Dialog","onClose","DialogTitle","DialogContent","DialogActions","NavBar","AppBar","position","sx","backgroundColor","boxShadow","Toolbar","alignItems","justifyContent","Offset","styled","mixins","toolbar","PageLayout","Stack","height","Container","maxWidth","flex","Box","display","EtherscanLink","Link","href","URL","toString","target","rel","useFetchData","fetcher","shouldFetchImmediately","setData","fetchData","validationSchema","Yup","shape","to","required","test","NFTTransferButton","contract","done","setDone","transfer","LoadingButton","disabled","width","borderTopLeftRadius","borderTopRightRadius","size","initialValues","onSubmit","values","submitForm","isSubmitting","handleChange","touched","errors","minWidth","pt","TextField","fullWidth","name","label","onChange","Boolean","helperText","CenteredLoadingIndicator","flexGrow","CircularProgress","NFTCardMetadata","tokenURI","log","metadata","CardMedia","component","image","NFTDataRow","title","Typography","NFTCardContent","getTokenURI","CardContent","direction","spacing","CardActions","padding","disableSpacing","NFTCard","props","Card","flexDirection","createERC721Contract","contractObject","Contract","gasLimit","err","NFTGalleryPage","library","handleGetNFTsClick","length","loadingPosition","startIcon","Grid","container","xs","md","columns","sm","nft","item","getSigner","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.048cde8c.chunk.js","sourcesContent":["import { createTheme } from \"@mui/material/styles\";\n\n// A custom theme for this app\nconst theme = createTheme();\n\nexport default theme;\n","export const EXAMPLE_ACCOUNT = \"0x4c4a5490deefefa16f49a1a48c9acdc60f4117d0\";\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { fetchTokens, TokenData } from \"../services/covalent\";\nimport { EXAMPLE_ACCOUNT } from \"../config/constants\";\n\nexport interface AppStateContextType {\n  // setExampleAccount: React.Dispatch<React.SetStateAction<string | undefined>>;\n  exampleAccount: string | undefined;\n  loading: boolean;\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  tokens: TokenData[] | undefined;\n  error: Error | undefined;\n  setError: React.Dispatch<React.SetStateAction<Error | undefined>>;\n\n  toggleExampleAccount: () => void;\n  getTokens: (appAccount: string) => Promise<void>;\n}\n\nconst AppStateContext = React.createContext<AppStateContextType>(null!);\n\nexport function useAppState() {\n  return useContext(AppStateContext);\n}\n\nexport function AppStateProvider({ children }: { children: React.ReactNode }) {\n  const { error } = useWeb3React();\n\n  const [exampleAccount, setExampleAccount] = useState<string | undefined>(\n    undefined\n  );\n\n  const [tokens, setTokens] = useState<TokenData[] | undefined>(undefined);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [appError, setAppError] = useState<Error>();\n\n  const toggleExampleAccount = useCallback(() => {\n    setTokens(undefined);\n    if (exampleAccount) {\n      return setExampleAccount(undefined);\n    }\n\n    return setExampleAccount(EXAMPLE_ACCOUNT);\n  }, [exampleAccount]);\n\n  const getTokens = useCallback((appAccount: string) => {\n    setLoading(true);\n    setAppError(undefined);\n\n    return fetchTokens(appAccount)\n      .then((nfts) => {\n        // TODO: isMounted\n        setTokens(nfts);\n        setLoading(false);\n      })\n      .catch((error) => setAppError(error));\n  }, []);\n\n  useEffect(() => {\n    // Have one error for the whole app\n    if (!appError && error) {\n      setAppError(error);\n    }\n  }, [error, setAppError, appError]);\n\n  return (\n    <AppStateContext.Provider\n      value={{\n        toggleExampleAccount,\n        getTokens,\n        exampleAccount,\n        error: appError,\n        setError: setAppError,\n        loading,\n        tokens,\n        setLoading,\n      }}\n    >\n      {children}\n    </AppStateContext.Provider>\n  );\n}\n","interface ErrorJSON {\n  error: boolean;\n  error_message: string;\n  error_code: number;\n}\n\ninterface Token {\n  nft_data: {\n    token_id: string;\n    owner: string;\n  }[];\n  supports_erc: (\"erc721\" | \"erc20\" | \"erc1155\")[];\n  contract_address: string;\n}\n\ninterface ResultJSON {\n  data: {\n    items: Token[];\n  };\n}\n\nexport interface TokenData {\n  contractAddress: string;\n  tokenId: string;\n  owner: string;\n}\n\nexport function fetchTokens(address: string): Promise<TokenData[]> {\n  return fetch(\n    `https://api.covalenthq.com/v1/1/address/${address}/balances_v2/?quote-currency=USD&format=JSON&nft=true&no-nft-fetch=true&key=ckey_docs`\n  ).then(async (res) => {\n    let json = undefined;\n    try {\n      json = await res.json();\n    } catch (error) {\n      console.error(error);\n      throw new Error(\"Something went wrong\");\n    }\n\n    if (!json) {\n      throw new Error(\"Something went wrong\");\n    }\n\n    if ((json as ErrorJSON).error) {\n      const { error_message, error_code } = json;\n      console.error(error_message);\n      throw new Error(`Error with code #${error_code}: ${error_message}`);\n    }\n\n    const {\n      data: { items: tokens },\n    } = json as ResultJSON;\n\n    return tokens\n      .filter(\n        ({ nft_data, supports_erc }) =>\n          nft_data && supports_erc && supports_erc.includes(\"erc721\")\n      )\n      .flatMap(({ contract_address, nft_data }) => {\n        return nft_data.map(({ token_id, owner }) => ({\n          contractAddress: contract_address,\n          tokenId: token_id,\n          owner,\n        }));\n      });\n  });\n}\n","import React, { useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWeb3React, Web3ReactProvider } from \"@web3-react/core\";\nimport { InjectedConnector } from \"@web3-react/injected-connector\";\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1],\n});\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype TakeTail<T extends any[]> = T extends [infer H, ...infer T] ? T : never;\n\nexport function useWeb3() {\n  const { activate, ...rest } = useWeb3React();\n\n  const activateWithConnector = useCallback(\n    (...args: TakeTail<Parameters<typeof activate>>) =>\n      activate(injected, ...args),\n    [activate]\n  );\n\n  return {\n    activate: activateWithConnector,\n    ...rest,\n  };\n}\n\nfunction getLibrary(provider: any) {\n  return new ethers.providers.Web3Provider(provider);\n}\n\nexport function Web3Provider({ children }: { children: React.ReactNode }) {\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>{children}</Web3ReactProvider>\n  );\n}\n","import { getAddress } from \"@ethersproject/address\";\n\n// Source: https://github.com/Uniswap/interface\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function formatAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address);\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n}\n","import { useState } from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n} from \"@mui/material\";\nimport { useWeb3 } from \"../../hooks/useWeb3\";\nimport { formatAddress } from \"../../utils/formatAddress\";\n\nexport default function ConnectWalletButton() {\n  const { account, activate, deactivate } = useWeb3();\n  const [open, setOpen] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleButtonClick = () => {\n    if (!account) {\n      return activate();\n    }\n    setOpen(true);\n  };\n\n  const handleConfirmClick = () => {\n    deactivate();\n    handleClose();\n  };\n  return (\n    <>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleButtonClick}>\n        {account ? formatAddress(account) : \"Connect wallet\"}\n      </Button>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Disconnect wallet</DialogTitle>\n        <DialogContent>\n          Are you sure you want to disconnect your wallet?\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button\n            onClick={handleConfirmClick}\n            variant=\"contained\"\n            color=\"error\"\n          >\n            Disconnect\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n}\n","import { AppBar, Button, Toolbar } from \"@mui/material\";\n\nimport { useAppState } from \"../../hooks/useAppState\";\nimport ConnectWalletButton from \"../ConnectWalletButton\";\n\nexport default function NavBar() {\n  const { exampleAccount, toggleExampleAccount } = useAppState();\n\n  return (\n    <AppBar\n      position=\"fixed\"\n      sx={{ backgroundColor: \"transparent\", boxShadow: \"none\" }}\n    >\n      <Toolbar sx={{ alignItems: \"center\", justifyContent: \"space-between\" }}>\n        <Button\n          variant=\"contained\"\n          color={exampleAccount ? \"error\" : \"secondary\"}\n          onClick={() => toggleExampleAccount()}\n        >\n          {exampleAccount ? \"Show my wallet\" : \"Show example\"}\n        </Button>\n        <ConnectWalletButton />\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import { Box, Container, Stack } from \"@mui/material\";\nimport styled from \"@emotion/styled\";\n\nimport NavBar from \"./NavBar\";\n\nconst Offset = styled(\"div\")(({ theme }) => theme.mixins.toolbar);\n\nexport default function PageLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <Stack sx={{ height: \"100vh\" }}>\n      <NavBar />\n      <Offset />\n      <Container maxWidth=\"xl\" sx={{ flex: 1 }}>\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            height: \"100%\",\n          }}\n        >\n          {children}\n        </Box>\n      </Container>\n    </Stack>\n  );\n}\n","import { Link } from \"@mui/material\";\nimport { formatAddress } from \"../../utils/formatAddress\";\n\nconst ETHERSCAN_BASE_URL = `https://etherscan.io`;\n\nexport default function EtherscanLink({ address }: { address: string }) {\n  // take first 6 and last 4 chars, join them with ...\n  // always 13 chars\n  // const shortenedAddress =\n\n  return (\n    <Link\n      href={new URL(`/address/${address}`, ETHERSCAN_BASE_URL).toString()}\n      target=\"_blank\"\n      rel=\"noopener\"\n    >\n      {formatAddress(address)}\n    </Link>\n  );\n}\n","import { useCallback, useEffect, useState } from \"react\";\n\ntype DefaultFetcher<Data extends any> = () => Promise<Data>;\nexport default function useFetchData<\n  Data = any,\n  Fetcher extends DefaultFetcher<Data> = DefaultFetcher<Data>\n>(fetcher: Fetcher, shouldFetchImmediately: boolean = true) {\n  const [data, setData] = useState<Data>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const fetchData = useCallback(() => {\n    setLoading(true);\n    setData(undefined);\n    setError(undefined);\n\n    return fetcher()\n      .then((res) => {\n        // TODO: isMounted\n        setData(res);\n        setLoading(false);\n      })\n      .catch((error: Error) => {\n        setError(error);\n        setLoading(false);\n      });\n  }, [fetcher, setError, setLoading]);\n\n  useEffect(() => {\n    if (!shouldFetchImmediately) return;\n    fetchData();\n  }, [fetchData, shouldFetchImmediately]);\n\n  return {\n    data,\n    loading,\n    error,\n    fetchData,\n  };\n}\n","import { LoadingButton } from \"@mui/lab\";\nimport { isAddress } from \"@ethersproject/address\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  Box,\n} from \"@mui/material\";\nimport { useCallback, useState } from \"react\";\nimport { Formik, FormikConfig } from \"formik\";\nimport * as Yup from \"yup\";\nimport type { NFTCardContentProps } from \"./NFTCard\";\n\nconst validationSchema = Yup.object().shape({\n  to: Yup.string()\n    .required(\"Address is required\")\n    .test(\"isAddress\", \"You have to provide a valid address\", (value) =>\n      value ? isAddress(value) : false\n    ),\n});\n\ninterface FormValues {\n  to: string;\n}\n\nexport default function NFTTransferButton({\n  contract,\n  tokenId,\n}: Pick<NFTCardContentProps, \"contract\" | \"tokenId\">) {\n  const [done, setDone] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n\n  const transfer = useCallback(\n    (to: string) => {\n      // TODO: isMounted\n      setLoading(true);\n      contract\n        .transfer(to, tokenId)\n        .then(() => {\n          setLoading(false);\n          setDone(true);\n        })\n        .catch((error: Error) => {\n          setLoading(false);\n          setError(error);\n        });\n    },\n    [tokenId, contract]\n  );\n\n  const [open, setOpen] = useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleButtonClick = () => {\n    setOpen(true);\n  };\n\n  const initialValues: FormValues = {\n    to: \"\",\n  };\n\n  const handleSubmit: FormikConfig<FormValues>[\"onSubmit\"] = (values) => {\n    transfer(values.to);\n    handleClose();\n  };\n\n  return (\n    <>\n      <LoadingButton\n        variant=\"contained\"\n        color={error ? \"error\" : done ? \"success\" : \"primary\"}\n        loading={loading}\n        disabled={done}\n        sx={{\n          width: \"100%\",\n          borderTopLeftRadius: 0,\n          borderTopRightRadius: 0,\n        }}\n        size=\"large\"\n        onClick={handleButtonClick}\n      >\n        Transfer\n      </LoadingButton>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Transferring #{tokenId}</DialogTitle>\n        <Formik<FormValues>\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({\n            submitForm,\n            isSubmitting,\n            values,\n            handleChange,\n            touched,\n            errors,\n          }) => (\n            <>\n              <DialogContent sx={{ minWidth: \"400px\" }}>\n                <Box sx={{ pt: 2 }}>\n                  <TextField\n                    fullWidth\n                    name=\"to\"\n                    label=\"To Address\"\n                    value={values.to}\n                    onChange={handleChange}\n                    error={touched.to && Boolean(errors.to)}\n                    helperText={touched.to && errors.to}\n                  />\n                </Box>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={handleClose}>Cancel</Button>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={isSubmitting}\n                  onClick={submitForm}\n                >\n                  Send\n                </Button>\n              </DialogActions>\n            </>\n          )}\n        </Formik>\n      </Dialog>\n    </>\n  );\n}\n","import {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardMedia,\n  CircularProgress,\n  Link,\n  Stack,\n  Typography,\n} from \"@mui/material\";\nimport React, { useCallback } from \"react\";\nimport useFetchData from \"../../hooks/useFetchData\";\nimport { createERC721Contract } from \"../../services/contract\";\nimport { TokenData } from \"../../services/covalent\";\nimport fetchTokenURI, { Metadata } from \"../../services/fetchTokenURI\";\nimport EtherscanLink from \"../EtherscanLink\";\nimport NFTTransferButton from \"./NFTTransferButton\";\n\nfunction CenteredLoadingIndicator() {\n  return (\n    <Box\n      sx={{\n        flexGrow: 1,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <CircularProgress />\n    </Box>\n  );\n}\n\nexport type NFTCardContentProps = TokenData & {\n  contract: ReturnType<typeof createERC721Contract>;\n};\n\nfunction NFTCardMetadata({ tokenURI }: { tokenURI: string }) {\n  const callFetchTokenURI = useCallback(\n    () => fetchTokenURI(tokenURI),\n    [tokenURI]\n  );\n\n  const {\n    data: metadata,\n    loading,\n    error,\n    fetchData,\n  } = useFetchData<Metadata>(callFetchTokenURI);\n\n  if (error) {\n    return <Button onClick={fetchData}>Reload image</Button>;\n  }\n\n  if (loading || !metadata) {\n    return <CenteredLoadingIndicator />;\n  }\n\n  return <CardMedia component=\"img\" height=\"335\" image={metadata.image} />;\n}\n\nfunction NFTDataRow({\n  title,\n  label,\n}: {\n  title: React.ReactNode;\n  label: React.ReactNode;\n}) {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <Typography>{title}</Typography>\n      <Typography>{label}</Typography>\n    </Box>\n  );\n}\n\nfunction NFTCardContent({\n  contract,\n  tokenId,\n  contractAddress,\n}: NFTCardContentProps) {\n  const callFetchTokenURI = useCallback(\n    () => contract.getTokenURI(tokenId),\n    [tokenId, contract]\n  );\n\n  const {\n    data: tokenURI,\n    loading,\n    error,\n    fetchData,\n  } = useFetchData<string>(callFetchTokenURI);\n\n  if (error) {\n    return <Button onClick={fetchData}>Reload</Button>;\n  }\n\n  if (loading || !tokenURI) {\n    return <CenteredLoadingIndicator />;\n  }\n\n  return (\n    <>\n      <Box\n        sx={{\n          flexGrow: 1,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        {tokenURI ? <NFTCardMetadata tokenURI={tokenURI} /> : null}\n      </Box>\n      <CardContent\n        sx={{\n          height: \"128px\",\n        }}\n      >\n        <Stack direction=\"column\" spacing={1}>\n          <NFTDataRow title={`Token Id:`} label={`#${tokenId}`} />\n          <NFTDataRow\n            title={`Contract:`}\n            label={<EtherscanLink address={contractAddress} />}\n          />\n          <NFTDataRow\n            title={`Metadata:`}\n            label={\n              <Link href={tokenURI} target=\"_blank\" rel=\"noopener\">\n                Open link\n              </Link>\n            }\n          />\n        </Stack>\n      </CardContent>\n      <CardActions sx={{ padding: 0 }} disableSpacing>\n        <NFTTransferButton contract={contract} tokenId={tokenId} />\n      </CardActions>\n    </>\n  );\n}\n\nexport default function NFTCard(props: NFTCardContentProps) {\n  return (\n    <Card\n      sx={{\n        height: \"500px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\",\n      }}\n    >\n      <NFTCardContent {...props} />\n    </Card>\n  );\n}\n","export interface Metadata {\n  image: string;\n}\n\nexport default function fetchTokenMetadata(url: string) {\n  return fetch(url).then(async (res) => {\n    let json = undefined;\n    try {\n      json = await res.json();\n      console.log(json);\n    } catch (error) {\n      console.error(error);\n      throw new Error(\"Something went wrong\");\n    }\n\n    if (!json) {\n      throw new Error(\"Something went wrong\");\n    }\n\n    return json as Metadata;\n  });\n}\n","import { Contract, Signer } from \"ethers\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\n\nexport function createERC721Contract(\n  contractAddress: string,\n  provider: Signer | Provider\n) {\n  try {\n    const contractABI = [\n      \"function tokenURI(uint256 _tokenId) external view returns (string memory)\",\n      \"function transfer(address to, uint amount) returns (bool)\",\n    ];\n    const contractObject = new Contract(contractAddress, contractABI, provider);\n\n    return {\n      getTokenURI(tokenId: string): Promise<string> {\n        return contractObject.tokenURI(tokenId);\n      },\n      transfer(to: string, tokenId: string) {\n        return contractObject.transfer(to, tokenId, { gasLimit: 85000 });\n      },\n    };\n  } catch (err) {\n    throw err;\n  }\n}\n","import { useCallback, useEffect } from \"react\";\nimport { Grid, Typography, Box, Stack } from \"@mui/material\";\nimport { LoadingButton } from \"@mui/lab\";\n\nimport { useWeb3 } from \"../hooks/useWeb3\";\nimport { useAppState } from \"../hooks/useAppState\";\nimport EtherscanLink from \"../components/EtherscanLink\";\nimport NFTCard from \"../components/NFTCard\";\n\nimport { createERC721Contract } from \"../services/contract\";\n\nexport default function NFTGalleryPage() {\n  const { account, library, activate, deactivate } = useWeb3();\n  const { exampleAccount, error, tokens, loading, getTokens } = useAppState();\n\n  useEffect(() => {\n    activate();\n    return () => {\n      deactivate();\n    };\n  }, [activate, deactivate]);\n\n  const appAccount = exampleAccount ?? account;\n\n  const handleGetNFTsClick = useCallback(() => {\n    if (!appAccount) return;\n    getTokens(appAccount);\n  }, [getTokens, appAccount]);\n\n  if (!appAccount || !library) {\n    return <Typography>Connect your wallet first</Typography>;\n  }\n\n  if (error) {\n    return <Typography>An error occured</Typography>;\n  }\n\n  if (tokens === undefined || tokens.length <= 0) {\n    return (\n      <Stack direction=\"column\" spacing={2}>\n        <Typography>\n          Your selected wallet is <EtherscanLink address={appAccount} />\n        </Typography>\n        {tokens !== undefined && tokens.length <= 0 ? (\n          <Typography>\n            You don't have any NFTs. Check out the example or click the button\n            again!\n          </Typography>\n        ) : null}\n        <LoadingButton\n          variant=\"contained\"\n          loadingPosition=\"start\"\n          startIcon={`🚀`}\n          color={\"secondary\"}\n          onClick={handleGetNFTsClick}\n          loading={loading}\n        >\n          {loading\n            ? \"NFTs incoming...\"\n            : exampleAccount\n            ? \"Get NFTs\"\n            : \"Get my NFTs\"}\n        </LoadingButton>\n      </Stack>\n    );\n  }\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <Grid\n        container\n        spacing={{ xs: 2, md: 3 }}\n        columns={{ xs: 4, sm: 8, md: 12 }}\n      >\n        {tokens.map((nft) => (\n          <Grid\n            item\n            xs={2}\n            sm={4}\n            md={4}\n            key={`${nft.contractAddress}-${nft.tokenId}`}\n          >\n            <NFTCard\n              {...nft}\n              contract={createERC721Contract(\n                nft.contractAddress,\n                library.getSigner()\n              )}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n","import PageLayout from \"./components/PageLayout\";\nimport NFTGalleryPage from \"./pages/NFTGalleryPage\";\nimport { Web3Provider } from \"./hooks/useWeb3\";\nimport { AppStateProvider } from \"./hooks/useAppState\";\n\nfunction App() {\n  return (\n    <Web3Provider>\n      <AppStateProvider>\n        <PageLayout>\n          <NFTGalleryPage />\n        </PageLayout>\n      </AppStateProvider>\n    </Web3Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport { ThemeProvider } from \"@mui/material/styles\";\n\nimport theme from \"./theme\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}